// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  password      String
  image         String?
  isAdmin       Boolean   @default(true)
  department    String?
  position      String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  accounts      Account[]
  sessions      Session[]
  retentionData RetentionData?
  performanceData PerformanceData?
  sentMessages  Message[]
  riskAlerts    RiskAlert[]
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model RetentionData {
  id              String   @id @default(cuid())
  userId          String   @unique
  retentionRisk   Int      @default(0) // 0-100 scale
  meetingLoad     Int      @default(0) // hours per week
  afterHoursWork  Int      @default(0) // hours per week
  complaintsCount Int      @default(0)
  communicationVolume Int  @default(0)
  positiveLanguagePercent Int @default(0)
  optionalMeetingsCount Int @default(0)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model PerformanceData {
  id                String   @id @default(cuid())
  userId            String   @unique
  leadershipComplaints Int   @default(0)
  complaintsCount   Int      @default(0)
  communicationVolume Int    @default(0)
  responseTimeAvg   Int      @default(0) // minutes
  negativeLanguagePercent Int @default(0)
  repeatedTopicsCount Int    @default(0)
  overdueTasksCount Int      @default(0)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Message {
  id          String   @id @default(cuid())
  content     String   @db.Text
  isPositive  Boolean  @default(false)
  isNegative  Boolean  @default(false)
  isNeutral   Boolean  @default(true)
  sentAt      DateTime @default(now())
  userId      String
  
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model RiskAlert {
  id          String   @id @default(cuid())
  title       String
  description String
  severity    String   // high, medium, low
  category    String   // harassment, burnout, security, etc.
  isResolved  Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      String

  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Document {
  id          String   @id @default(cuid())
  name        String
  type        String   // docx, xlsx, pdf, etc.
  creator     String
  lastModified DateTime
  views       Int      @default(0)
  category    String   // inactive, collaboration, access
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

